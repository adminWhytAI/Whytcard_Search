# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/reference/configuration-reference
version: 2.1

# Define orbs for reusable commands and jobs
orbs:
  node: circleci/node@5.1.0
  python: circleci/python@2.1.1

# Define jobs to be invoked later in workflows
jobs:
  # Job for Node.js projects
  build-and-test-node:
    docker:
      - image: cimg/node:18.17
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Run tests
          command: npm test
      - run:
          name: Generate coverage report
          command: npm run coverage || echo "No coverage script found"
      - run:
          name: Run Codacy Coverage Reporter
          command: |
            if [ -f coverage/lcov.info ]; then
              bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage/lcov.info
            else
              echo "No coverage file found, skipping coverage report"
            fi

  # Job for Python projects
  build-and-test-python:
    docker:
      - image: cimg/python:3.11
    steps:
      - checkout
      - python/install-packages:
          pkg-manager: pip
      - run:
          name: Run tests
          command: |
            if [ -f requirements.txt ]; then
              pip install -r requirements.txt
            fi
            if [ -f setup.py ]; then
              pip install -e .
            fi
            python -m pytest --cov=. --cov-report=xml || echo "No tests found"
      - run:
          name: Run Codacy Coverage Reporter
          command: |
            if [ -f coverage.xml ]; then
              bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage.xml
            else
              echo "No coverage file found, skipping coverage report"
            fi

  # Generic job for projects without specific language requirements
  build-and-test-generic:
    docker:
      - image: cimg/base:current
    steps:
      - checkout
      - run:
          name: "Project setup check"
          command: |
            echo "Checking project structure..."
            ls -la
            echo "Project setup completed successfully!"
      - run:
          name: "Run basic checks"
          command: |
            echo "Running basic project validation..."
            # Add any generic validation commands here
            echo "Basic checks completed!"

# Define workflows to orchestrate jobs
workflows:
  # Main workflow that determines project type and runs appropriate jobs
  build-and-test:
    jobs:
      # Check if it's a Node.js project
      - build-and-test-node:
          filters:
            branches:
              only: /.*/
          pre-steps:
            - run:
                name: Check for Node.js project
                command: |
                  if [ ! -f package.json ]; then
                    echo "No package.json found, skipping Node.js build"
                    circleci step halt
                  fi
      
      # Check if it's a Python project
      - build-and-test-python:
          filters:
            branches:
              only: /.*/
          pre-steps:
            - run:
                name: Check for Python project
                command: |
                  if [ ! -f requirements.txt ] && [ ! -f setup.py ] && [ ! -f pyproject.toml ]; then
                    echo "No Python project files found, skipping Python build"
                    circleci step halt
                  fi
      
      # Fallback generic job
      - build-and-test-generic:
          filters:
            branches:
              only: /.*/

  # Nightly workflow for additional checks
  nightly:
    triggers:
      - schedule:
          cron: "0 2 * * *"
          filters:
            branches:
              only:
                - main
                - master
                - circleci-project-setup
    jobs:
      - build-and-test-generic